// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CONSUMER
  CREATER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?  
  password      String?
  image         String?
  role          UserRole  @default(CONSUMER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String   @db.ObjectId

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   
  token     String   @unique
  expires   DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   
  token     String   @unique
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   
  token     String   @unique
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}